<% extend('admin_base') %>
	<div class="content mb-50">
		<div class="mb-50" style='text-align: center'>
			ğŸ‘‰ <strong> <a target="_blank" href="https://drive.google.com/file/d/1DrR9emfzo9AieUXaw5KZz20iXNFSWsyk/view?usp=sharing">Hier</a> geht es zur Bachelorarbeit dieses Projektes</strong> ğŸ‘ˆ
		</div>
		<h2 class="header-2 mb-20">Willkommen im Admin-Bereich</h2> 
		<p>
			Ãœber das MenÃ¼ auf der linken Seite, kÃ¶nnen die Sektionen und Aufgaben fÃ¼r die Studenten angelegt werden. 
			Die Datenbank hat den folgenden UML Aufbau: 
		</p>
		<img class="img mb-20"src="/img/Database_ER.png" alt="ER Diagramm">
		<div>
			<p class="mb-20">
				<strong>Sectioninstance</strong>: Eine Sektionsinstanz bildet den Rahmen fuÌˆr eine komplette Lerneinheit. Sie referenziert Sektionen mit zusammengehÃ¶renden Themengebieten.
			</p>
			<p class="mb-20">
				<strong>Section</strong>: Eine Sektion beinhaltet die allgemeine Beschreibung eines 	einzelnen Themengebietes und gehÃ¶rt einer Sektionsinstanz an. AuÃŸerdem referenziert sie eine oder mehrere Aufgabeninstanzen.
			</p>
			<p class="mb-20">
				<strong>Taskinstance</strong>: Eine Aufgabeninstanz ist die Gesamtheit einer Aufgabe und setzt
				sich aus mehreren Unteraufgaben zusammen, die in diesem Objekt referenziert werden. Jede Aufgabeninstanz besitzt eine Sektion als Elternelement. Eine Aufgabeninstanz speichert zusÃ¤tzlich den eingegebenen Code der Nutzer, sowie den von den Tutoren optional definierten Anfangscode einer Aufgabe.
			</p>
			<p class="mb-20">
				<strong>Task</strong>: Eine Aufgabe beinhaltet die eigentliche Aufgabenbeschreibung fuÌˆr einen Testfall. ZusÃ¤tzlich speichert sie den LÃ¶sungsstand (wahr/falsch) der Aufgabe.
			</p>
		</div>
		<div class="divider"></div>
		<p class="mb-20">
			<strong>Bitte beachten Sie:</strong> Es kÃ¶nnen nur Objekte anhand bereits vorhandener Objekte erstellt werden. (Es mÃ¼ssen also z.B. schon alle Sektionen erstellt werden und kÃ¶nnen dann der Sektions-Instanz zugewiesen werden) 
		</p>
		<p>Es bietet sich an, bei der Erstellung der Objekte in folgender Reihenfolge vorzugehen: </p>
		<ol class="mb-20">
			<li>Alle Tasks einer Aufgabe erstellen</li>
			<li>Task-Instanz erstellen und die Tasks dieser Instanz zuweisen</li>
			<li>Section erstellen und Task-Instanz zuweisen </li>
			<li>Section-Instanz erstellen und Section zuweisen </li>
		</ol>
		<h4>Objekt-Nummerierung und Namensgebung:</h4>
		<p class="mb-10">
			Beim Erstellen einer Sectioninstance, Section, Taskinstance oder einem Task wird automatisch eine einzigartige Nummer (Autoinkrement) generiert und der Titel des Objektes wird URLIFIED. Der URLIFIED Titel muss in der Ordner-/Dateistruktur verwendet werden, sodass ein einwandfreies Testen gewÃ¤hrleistet werden kann.
		</p>
		<p>Die Titel/Namen eines Objektes kÃ¶nnen beliebieg gewÃ¤hlt werden.</p>
		<p>Eine korrekte Hierarchie kÃ¶nnte wie folgt aussehen:</p>
		<ol class="mb-40">
			<li><strong>Section-Instanz:</strong> HTML-Grundlagen (Ordnername: html-grundlagen1)</li>
			<ol>
				<li><strong>Section:</strong> Basis-Elemente (Ordnername: basis_elemente2)</li>
				<ol>
					<li><strong>Testinstanz:</strong> AbsÃ¤tze und Ãœberschriften (Dateiname: absaetze_und_ueberschriften3)</li>
					<ol>
						<li><strong>Task:</strong> AbsÃ¤tze erstellen (Funktionsname: absaetze_erstellen4)</li>
					</ol>
				</ol>
			</ol>
		</ol>

		<p class="mt-20">
			<strong>Achtung:</strong> Objekte kÃ¶nnen nur in ihrer Hierarchieebene verschoben  werden (drag-and-drop), jedoch nicht aus ihrer Hierarchieebene herausgenommen werden, ohne dass die Testdateien in der Ordnerstruktur ebenfalls verschoben werden. Wird dies nicht beachtet, kann die Applikation die passenden Test-Funktionen nicht mehr abrufen, was zu einem Absturz der Applikation fuÌˆhrt.
		</p>
		<div class="divider"></div>
		<h4>Tests:</h4>
		<p>
			Alle Test-Dateien mÃ¼ssen sich in folgendem Verzeichnis befinden: <code> root > src > js > tests</code>. 
		</p>
		<p>
			Damit die Tests von der Applikation gefunden werden kÃ¶nnen, muss innerhalb des <code>tests</code>-Ordner die folgende Verzeichnisstruktur und Namensgebung eingehalten werden: 
		</p>
		<p class="mb-10"><code>sectioninstance${sectioninstance_number} > section${section_number} > test${taskinstance_number}.js</code></p>
		
		<p>
			In den <code>test${taskinstance_number}.js</code>-Dateien befinden sich die eigentlichen Tests fÃ¼r die jeweiligen Aufgaben. Die Funktionsnamen fÃ¼r die Tests mÃ¼ssen wie folgt gewÃ¤hlt werden:
		</p>
		<p class="mb-10"><code>self.run${task_number} = (htmlNode, cssString, test, [...]) => { ... }</code></p>
		<p class="mb-10">
			<strong>Bitte beachten Sie:</strong> Jede <code>self.run${task_number}</code>-Funktion, muss nach dem letzten Test ein Promise wie folgt zurÃ¼ckgeben:
			<code>return Promise.resolve();</code>
		</p>
		<p class="mb-10">
			Die Tests basieren auf dem Modul <a target="_blank" href="https://github.com/studio-b12/tape-css">tape-css</a>. Tape-css benutzt die existierende <a target="_blank" href="https://github.com/substack/tape">API</a> der Test-Bibliothek tape.  
		</p>
		<p class="mb-20">
			Eine Beschreibung, wie die eigentlichen Tests implementiert werden kÃ¶nnen, sowie ein Basic-Testtemplate finden Sie im folgenden Verzeichnis: <code>root > src > js > tests >testexample</code>
		</p>
		<h4>Helferklassen</h4>
		<p class="mb-20">
			Jeder Test hat Zugriff auf eine <code>HelperInstance</code> als Variable. HierÃ¼ber kÃ¶nnen Helferklassen wie z.B. <code>HelperInstance.htmlDifferences(expected, actual, option)</code> aufgerufen werden. Eine Dokumentation Ã¼ber die hinterlegten Klassen folgt in KÃ¼rze. 
		</p>
		<h4>Testdateistrukturen automatisch generieren:</h4>
		<p>
			Ist eine Sectionsinstanz aufgebaut, so kÃ¶nnen die fÃ¼r die Tests benÃ¶tigten Dateien auch automatisch generiert werden. HierfÃ¼r muss im Admin Bereich auf der jeweiligen Detail-Seite der Sectioninstanz auf den Button "Create File-System Path" geklickt werden. Somit wird sicher gestellt, dass die Applikationen die korrekte Verzechnisstrukur besitzt und die Test-Dateien von der Applikation gefunden werden kÃ¶nnen. 
		</p>
		<p class="mb-20">GelÃ¶schte Objekte in der Datenbank werden in der Ordnerstruktur nicht automatisch gelÃ¶scht, sondern mÃ¼ssen hÃ¤ndisch gelÃ¶scht werden.</p>
		<div class="divider"></div>
		<h4>CodeMirror Validator:</h4>
		<p class="mb-20">
			Ist der vom Nutzer eingegebene HTML und CSS Code nicht valide, so wird den Run-Buttons die Klasse <code>validateErrorCSS</code> bzw. <code>validateErrorHTML</code> hizugefÃ¼gt. Ist dies der Fall, so werden die Testdateien nicht aufgerufen und dem Nutzer wird eine Fehlermeldung angezeigt. 
		</p>
		<h4>Bilder:</h4>
		<p class="mb-10">
			Alle Bilder die Ã¼ber den WYSIWYG-Editor eingefÃ¼gt werden, werden auf <a target="_blank" href="https://imgur.com">Imgur</a> hochgeladen. HierfÃ¼r wurde eine private Applikation erstellt. Die Bilder sind nur durch den Bild-Link abrufbar. Somit kÃ¶nnen auch Bilder verwendet werden, die nicht in der Applikation abgelegt wurden.
		</p>
		<p class="mb-20">
			Sollen Studierende Bilder in der Applikation verlinken, so wird empfohlen diese im folgenden Verzeichnis zu hinterlegen: <code>root > public > img </code> Hier kÃ¶nnen auch Unterordner angelegt werden.
		</p>
		<h4>Datenbank:</h4>
		<p class="mb-20">
			Die MongoDB-Datenbank wird auf <a target="_blank" href="https://mlab.com/">mLab</a> gehostet. Es wird <a href="https://mongoosejs.com/">Mongoose</a> fÃ¼r die Objektmodellierung verwendet.  
		</p>
		<h4>Weitere Module/Bibliotheken:</h4>
		<p>FÃ¼r die Implementierung des WYSIWG-Editor wird der "Rich-Text-Editor" <a target="_blank" href="https://quilljs.com/">Quill</a> benutzt.</p>
		<p>FÃ¼r den Code-Editor wird die <a target="_blank" href="https://codemirror.net/">Codemirror-Bibliothek</a> benutzt.</p>
		<div class="mt-50" style='text-align: center'>
			ğŸ‘‰ <strong> <a target="_blank" href="https://drive.google.com/file/d/1DrR9emfzo9AieUXaw5KZz20iXNFSWsyk/view?usp=sharing">Hier</a> geht es zur Bachelorarbeit dieses Projektes</strong> ğŸ‘ˆ
		</div>
	</div>