'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var assign = require('object-assign');
var find = require('array-find');
var drop = require('this-drop');
var arrayFrom = require('array-from');
var insertCss = require('insert-css');

var DOCUMENT_FRAGMENT_NODE = 11;

var getArgsAndOptions = function getArgsAndOptions(args) {
  // Get args. Based on
  // https://github.com/substack/tape/blob/aadcf4a9/lib/test.js .
  var name = find(args, function (arg) {
    return typeof arg === 'string';
  });
  var options = find(args, function (arg) {
    return typeof arg === 'object';
  }) || {};
  var callback = find(args, function (arg) {
    return typeof arg === 'function';
  });

  // Get options.
  var dom = options.dom;
  var styles = options.styles;

  var document = options.document || typeof window !== 'undefined' && window.document || null;
  // TODO: Throw if there’s no `document`.

  return {
    name: name, callback: callback, dom: dom, styles: styles, document: document,
    options: drop.call(options, ['dom', 'styles', 'document'])
  };
};

var wrappedCallback = function wrappedCallback(_ref) {
  var dom = _ref.dom;
  var styles = _ref.styles;
  var callback = _ref.callback;
  var document = _ref.document;
  var only = _ref.only;
  return function (t) {
    // Wrap the `callback` with our candy floss wonders:
    if (dom) {
      (function () {
        // Save the contents of our DocumentFragment before they get nuked.
        var domToRemove = dom.nodeType === DOCUMENT_FRAGMENT_NODE ? arrayFrom(dom.childNodes) : [dom];

        // Add the DOM.
        document.body.appendChild(dom);

        // Schedule the cleanup.
        if (!only) t.on('end', function () {
          domToRemove.forEach(function (element) {
            return document.body.removeChild(element);
          });
        });
      })();
    }

    if (styles) {
      (function () {
        var styleElement = insertCss(styles, { document: document });
        if (!only) t.on('end', function () {
          styleElement.parentNode.removeChild(styleElement);
        });
      })();
    }

    // Run the original callback.
    callback(t);
  };
};

var tapeFunction = function tapeFunction(_ref2) {
  var tape = _ref2.tape;
  var only = _ref2.only;
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _getArgsAndOptions = getArgsAndOptions(args);

    var name = _getArgsAndOptions.name;
    var options = _getArgsAndOptions.options;
    var callback = _getArgsAndOptions.callback;
    var dom = _getArgsAndOptions.dom;
    var styles = _getArgsAndOptions.styles;
    var document = _getArgsAndOptions.document;

    (only ? tape.only : tape)(name, options, wrappedCallback({ dom: dom, styles: styles, document: document, callback: callback, only: only }));
  };
};

/**
 * If you use tape, you’ll feel right at home. Give us an instance of `tape`.
 * We won’t change its [existing API][] in any way. We just add a couple
 * of `options`:
 *
 * - `dom` – one or more DOM elements. We’ll add it to the `<body>`
 *   before your test and clean it up after your test has ended.
 *   Default: nothing.
 *
 * - `styles` – a string of CSS. We’ll add it as a `<style>` to the `<head>`
 *   before your test – and clean it up after your test has ended.
 *   Default: nothing.
 *
 * - `document` – a custom implementation of `document`. It may be useful
 *   for testing outside a browser. Default: `window.document`.
 *
 * [existing API]:     https://github.com/substack/tape#methods
 *
 * @jsig
 *   test(tape) => (
 *     name?        : String,
 *     options?: {
 *       // All original `tape` options, and:
 *       dom?       : Element | DocumentFragment
 *       styles?    : String
 *       document?  : Document
 *     },
 *     callback     : Function
 *   ) => void
 */

exports['default'] = function (tape) {
  return assign(tapeFunction({ tape: tape, only: false }), tape, {
    only: tapeFunction({ tape: tape, only: true })
  });
};

module.exports = exports['default'];